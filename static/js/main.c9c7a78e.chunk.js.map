{"version":3,"sources":["components/Cell/Cell.js","components/Board/Board.js","components/ResultModal/ResultModal.js","utils/WinnerCalculator.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellClasses","classNames","cell","winner","canHighlight","cellContentClasses","populated","value","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","cellClicked","id","ResultModal","resultModalClasses","isGameOver","message","onNewGameClicked","winningMatrix","0","1","2","3","4","5","6","7","8","Game","useState","setCellValues","xIsNext","setXIsNext","setIsGameOver","numberTurnsLeft","setNumberTurnsLeft","setWinner","setWinningCombination","cellIndex","cellIsEmpty","newCellValues","newNumberTurnsLeft","calcResult","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9c7a78e.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\n\r\nimport './Cell.css'\r\n\r\nexport const Cell = (props) => {\r\n    const cellClasses = classNames({\r\n        cell: true,\r\n        winner: props.canHighlight\r\n    })\r\n\r\n    const cellContentClasses = classNames({\r\n        'cell-content': true,\r\n        populated: props.value\r\n    })\r\n\r\n    return (\r\n        <button className={cellClasses} onClick={props.onClick}>\r\n            <span className={cellContentClasses}>{props.value}</span>\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport { Cell } from '../Cell/Cell'\r\n\r\nimport './Board.css'\r\n\r\nexport const Board = (props) => {\r\n\r\n    const cells = props.cellValues.map((value, index) => {\r\n        const canHighlight = props.winningCombination && props.winningCombination.indexOf(index) >= 0;\r\n        return (\r\n            <Cell key={index} value={value} canHighlight={canHighlight} onClick={() => props.cellClicked(index)} />\r\n        )\r\n    })\r\n    return (\r\n        <div id=\"board\">\r\n            {cells}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport './ResultModal.css'\r\n\r\nexport const ResultModal = (props) => {\r\n    const resultModalClasses = classNames({\r\n        'modal-open': props.isGameOver\r\n    });\r\n\r\n    const message = props.winner ? ` ${props.winner} is the winner. ` : ` It's a TIE. `;\r\n\r\n    return (\r\n        <div id=\"modal-overlay\" className={resultModalClasses}>\r\n            <div id=\"game-result-modal\">\r\n                <div id=\"result-container\">\r\n                    <div id=\"winner-container\">\r\n                        <span>{message}</span>\r\n                    </div>\r\n                </div>\r\n                <div id=\"new-game-container\">\r\n                    <button id=\"new-game-button\" onClick={props.onNewGameClicked}>Start New Game</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","const winningMatrix = {\r\n    0: [[1, 2], [3, 6], [4, 8]],\r\n    1: [[0, 2], [4, 7]],\r\n    2: [[0, 1], [5, 8], [4, 6]],\r\n    3: [[0, 6], [4, 5]],\r\n    4: [[2, 6], [3, 5], [1, 7], [0, 8]],\r\n    5: [[3, 4], [2, 8]],\r\n    6: [[7, 8], [0, 3], [2, 4]],\r\n    7: [[6, 8], [1, 4]],\r\n    8: [[6, 7], [2, 5], [0, 4]]\r\n};\r\nexport const calculateWinner = (cellValues, numberTurnsLeft, cellIndex) => {\r\n\r\n    const winningRanges = winningMatrix[cellIndex];\r\n\r\n    for (let i = 0; i < winningRanges.length; i++) {\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winningRanges[i][0]];\r\n        const secondOption = cellValues[winningRanges[i][1]];\r\n\r\n        if (currentValue === firstOption && firstOption === secondOption) {\r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\r\n            }\r\n        }\r\n    }\r\n\r\n    if (numberTurnsLeft === 0) {\r\n        return {\r\n            hasResult: true,\r\n            winner: undefined,\r\n            winningCombination: []\r\n        }\r\n    }\r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination: []\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { Board } from '../Board/Board'\r\nimport { ResultModal } from '../ResultModal/ResultModal';\r\nimport { calculateWinner } from '../../utils/WinnerCalculator';\r\nimport './Game.css';\r\n\r\nexport const Game = () => {\r\n\r\n\r\n    const [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isGameOver, setIsGameOver] = useState(false);\r\n    const [numberTurnsLeft, setNumberTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [winningCombination, setWinningCombination] = useState([]);\r\n\r\n    const cellIsEmpty = (cellIndex) => cellValues[cellIndex] === '';\r\n\r\n    const restartGame = () => {\r\n\r\n        setCellValues(['', '', '', '', '', '', '', '', '']);\r\n        setXIsNext(true);\r\n        setNumberTurnsLeft(9);\r\n        setIsGameOver(false);\r\n        setWinner(undefined);\r\n        setWinningCombination([])\r\n\r\n    }\r\n\r\n    const onCellClicked = (cellIndex) => {\r\n        if (cellIsEmpty(cellIndex)) {\r\n            const newCellValues = [...cellValues];\r\n            newCellValues[cellIndex] = xIsNext ? 'X' : 'O';\r\n\r\n            const newNumberTurnsLeft = numberTurnsLeft - 1;\r\n\r\n            // calculate the result\r\n            const calcResult = calculateWinner(newCellValues, newNumberTurnsLeft, cellIndex);\r\n\r\n\r\n            setCellValues(newCellValues);\r\n            setXIsNext(!xIsNext);\r\n            setNumberTurnsLeft(newNumberTurnsLeft);\r\n            setIsGameOver(calcResult.hasResult);\r\n            setWinner(calcResult.winner);\r\n            setWinningCombination(calcResult.winningCombination);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div id=\"game\">\r\n                <h1>Tic Tac Toe</h1>\r\n                <Board\r\n                    cellValues={cellValues}\r\n                    winningCombination={winningCombination}\r\n                    cellClicked={onCellClicked} />\r\n            </div>\r\n\r\n            <ResultModal\r\n                isGameOver={isGameOver}\r\n                winner={winner}\r\n                onNewGameClicked={restartGame} />\r\n        </>\r\n    );\r\n}","import React from 'react';\n\nimport { Game } from './components/Game/Game'\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}